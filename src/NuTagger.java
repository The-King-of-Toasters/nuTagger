/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import IOPackage.TagIO;
import entagged.audioformats.exceptions.CannotReadException;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 * <h1> Main GUI File </h1>
 *
 * @author Stephen Gregoratto
 * @version Eternal Alpha
 * @since 2016
 */
public class NuTagger extends javax.swing.JFrame {

    public JFileChooser FILECHOOSER;
    public FileNameExtensionFilter SONGFILTER;
    public FileNameExtensionFilter TSVFILTER;
    public int ROWCOUNTER;

    /**
     * Creates the main form, initialises public JFileChooser, sets public
     * FileFilter for song files, initialises counter for filled rows.
     */
    public NuTagger() {
        this.FILECHOOSER = new JFileChooser();
        this.SONGFILTER = new FileNameExtensionFilter("Song Files"
                + "(mp3, ogg, flac, ape)", "mp3", "ogg", "flac", "ape");
        this.TSVFILTER = new FileNameExtensionFilter("Tab Seperated File (.tsv)", "tsv");
        FILECHOOSER.addChoosableFileFilter(SONGFILTER);
        this.ROWCOUNTER = 0;
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     *
     */
    public void LoadSong() {
        DefaultTableModel model = (DefaultTableModel) MusicTable.getModel();
        try {
            PrintSong();
            model.addRow(new Object[]{});
            // model.removeRow(MusicTable.getRowCount()-1);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "A valid music file has"
                    + " not been selected", "Input Error", ERROR_MESSAGE);
        }
    }

    /**
     *
     */
    public void PrintSong() {
        FILECHOOSER.setFileFilter(SONGFILTER);
        FILECHOOSER.showOpenDialog(null);
        String[] SongInfo = null;

        try {
            SongInfo = TagIO.GetTagsInFile(FILECHOOSER.getSelectedFile());
        } catch (CannotReadException ex) {
            Logger.getLogger(IOPackage.TagIO.class.getName()).log(Level.SEVERE, null, ex);
        }
        MusicTable.setValueAt(SongInfo[0], ROWCOUNTER, 0); // Loads Song Name in table
        MusicTable.setValueAt(SongInfo[1], ROWCOUNTER, 1); // Same for its Album
        MusicTable.setValueAt(SongInfo[2], ROWCOUNTER, 2); // Artist Name
        MusicTable.setValueAt(SongInfo[3], ROWCOUNTER, 3); // Year
        MusicTable.setValueAt(FILECHOOSER.getSelectedFile().getAbsolutePath(), ROWCOUNTER, 4); // Full Filepath

        SongTextField.setText(SongInfo[0]);
        AlbumTextField.setText(SongInfo[1]);
        ArtistTextField.setText(SongInfo[2]);
        YearTextField.setText(SongInfo[3]);
        GenreTextField.setText(SongInfo[4]);

        ROWCOUNTER++;
        FILECHOOSER.resetChoosableFileFilters(); // Resets filter for proper TSV export
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TableScrollPane = new javax.swing.JScrollPane();
        MusicTable = new javax.swing.JTable();
        SongTextField = new javax.swing.JTextField();
        AlbumTextField = new javax.swing.JTextField();
        ArtistTextField = new javax.swing.JTextField();
        YearTextField = new javax.swing.JTextField();
        GenreTextField = new javax.swing.JTextField();
        MainMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenListItem = new javax.swing.JMenuItem();
        SaveSelectedListItem = new javax.swing.JMenuItem();
        TSVSaveMenuItem = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        SelectEditMenuItem = new javax.swing.JMenuItem();
        ClearMenuItems = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        NestedDocsMenu = new javax.swing.JMenu();
        OnlineDocsItem = new javax.swing.JMenuItem();
        OfflineDocsItem = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        AboutNutaggerItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("nuTager - Screen Design");
        setFont(new java.awt.Font("Cantarell", 0, 12)); // NOI18N
        setLocationByPlatform(true);

        TableScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        TableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        MusicTable.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        MusicTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        MusicTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Song Name", "Album", "Artist", "Year", "File Path"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MusicTable.setColumnSelectionAllowed(true);
        MusicTable.setEditingColumn(1);
        MusicTable.setEditingRow(1);
        MusicTable.setGridColor(new java.awt.Color(200, 200, 200));
        MusicTable.getTableHeader().setReorderingAllowed(false);
        TableScrollPane.setViewportView(MusicTable);
        MusicTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (MusicTable.getColumnModel().getColumnCount() > 0) {
            MusicTable.getColumnModel().getColumn(3).setMinWidth(40);
            MusicTable.getColumnModel().getColumn(3).setPreferredWidth(60);
            MusicTable.getColumnModel().getColumn(3).setMaxWidth(60);
        }

        SongNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SongNameLabel.setText("Song Name:");

        AlbumLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        AlbumLabel.setText("Album:");

        ArtistLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ArtistLabel.setText("Artist:");

        YearLable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        YearLable.setText("Year:");

        GenreLable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        GenreLable.setText("Genre:");

        SongTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SongTextFieldActionPerformed(evt);
            }
        });

        AlbumTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlbumTextFieldActionPerformed(evt);
            }
        });

        ArtistTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArtistTextFieldActionPerformed(evt);
            }
        });

        MainMenuBar.setFont(MainMenuBar.getFont().deriveFont(MainMenuBar.getFont().getSize()+3f));

        FileMenu.setText("File");

        OpenListItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenListItem.setText("Open Files");
        OpenListItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenListItemActionPerformed(evt);
            }
        });
        FileMenu.add(OpenListItem);

        SaveSelectedListItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveSelectedListItem.setText("Save Selected");
        SaveSelectedListItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveSelectedListItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveSelectedListItem);

        TSVSaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        TSVSaveMenuItem.setText("Save Music to Database");
        TSVSaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TSVSaveMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(TSVSaveMenuItem);

        MainMenuBar.add(FileMenu);

        EditMenu.setText("Edit");

        SelectEditMenuItem.setText("Edit Selected");
        EditMenu.add(SelectEditMenuItem);

        ClearMenuItems.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.ALT_MASK));
        ClearMenuItems.setText("Clear All Values");
        ClearMenuItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearMenuItemsActionPerformed(evt);
            }
        });
        EditMenu.add(ClearMenuItems);

        MainMenuBar.add(EditMenu);

        HelpMenu.setText("Help");

        NestedDocsMenu.setText("Documentation");

        OnlineDocsItem.setText("Online (Github)");
        OnlineDocsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnlineDocsItemActionPerformed(evt);
            }
        });
        NestedDocsMenu.add(OnlineDocsItem);

        OfflineDocsItem.setText("Offline (Man Pages)");
        NestedDocsMenu.add(OfflineDocsItem);

        HelpMenu.add(NestedDocsMenu);
        HelpMenu.add(jSeparator1);

        AboutNutaggerItem.setText("About nuTagger");
        AboutNutaggerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutNutaggerItemActionPerformed(evt);
            }
        });
        HelpMenu.add(AboutNutaggerItem);

        MainMenuBar.add(HelpMenu);

        setJMenuBar(MainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(YearLable, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SongNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AlbumLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ArtistLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(YearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(GenreLable)
                                .addGap(18, 18, 18)
                                .addComponent(GenreTextField))
                            .addComponent(AlbumTextField)
                            .addComponent(SongTextField)
                            .addComponent(ArtistTextField))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(TableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SongTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SongNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlbumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AlbumLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArtistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArtistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(YearLable)
                        .addComponent(YearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(GenreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(GenreLable)))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenListItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenListItemActionPerformed
        LoadSong();
    }//GEN-LAST:event_OpenListItemActionPerformed

    private void SongTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SongTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SongTextFieldActionPerformed

    private void ArtistTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArtistTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArtistTextFieldActionPerformed

    private void AlbumTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlbumTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlbumTextFieldActionPerformed

    private void OnlineDocsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnlineDocsItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OnlineDocsItemActionPerformed

    private void AboutNutaggerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutNutaggerItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AboutNutaggerItemActionPerformed

    private void TSVSaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TSVSaveMenuItemActionPerformed
        FILECHOOSER.setFileFilter(TSVFILTER);
        if (FILECHOOSER.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            //FILECHOOSER.setFileFilter(TSVFILTER);
            String filename = FILECHOOSER.getSelectedFile().getName();
            String path = FILECHOOSER.getSelectedFile().getParentFile().getPath();

            int FilenameLength = filename.length();
            String FileExtension = null, file = null;

            if (FilenameLength > 4) {
                FileExtension = filename.substring(FilenameLength - 4, FilenameLength);
            }

            if (FileExtension.equals(".tsv")) {
                file = path + "//" + filename;
            } else {
                file = path + "//" + filename + ".tsv";
            }

            try {
                IOPackage.DatabaseIO.ToTSV(new File(file), MusicTable, ROWCOUNTER);
            } catch (IOException ex) {
                Logger.getLogger(NuTagger.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        FILECHOOSER.resetChoosableFileFilters(); // Resets Filter for Music Import
    }//GEN-LAST:event_TSVSaveMenuItemActionPerformed

    private void SaveSelectedListItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveSelectedListItemActionPerformed
        try {
            String[] NewData = new String[5];

            NewData[0] = SongTextField.getText();
            NewData[1] = AlbumTextField.getText();
            NewData[2] = ArtistTextField.getText();
            NewData[3] = YearTextField.getText();
            NewData[4] = GenreTextField.getText();

            File PathAtRow = new File(MusicTable.getValueAt(MusicTable.getSelectedRow(), 4).toString());

            IOPackage.TagIO.WriteNewTagsToFile(NewData, PathAtRow);
        } catch (CannotReadException ex) {
            Logger.getLogger(NuTagger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveSelectedListItemActionPerformed

    private void ClearMenuItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearMenuItemsActionPerformed
        for (int i = 0; i <= (ROWCOUNTER - 1); i++) {
            for (int j = 0; j <= (MusicTable.getColumnCount() - 1); j++) {
                MusicTable.setValueAt(null, i, j);
            }
        }
        
        SongTextField.setText(null);
        AlbumTextField.setText(null);
        ArtistTextField.setText(null);
        YearTextField.setText(null);
        GenreTextField.setText(null);
        
        ROWCOUNTER = 0;
    }//GEN-LAST:event_ClearMenuItemsActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Setup menu bars ar the top for Mac OS X */
        System.setProperty("apple.laf.useScreenMenuBar", "true");
        System.setProperty("com.apple.mrj.application.menu.about.name", "ImageRotator");
        /* Set Look and Feel based on OS Default (Windows, Aqua, GTK or Metal fallback) */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(NuTagger.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new NuTagger().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutNutaggerItem;
    private static final javax.swing.JLabel AlbumLabel = new javax.swing.JLabel();
    private javax.swing.JTextField AlbumTextField;
    private static final javax.swing.JLabel ArtistLabel = new javax.swing.JLabel();
    private javax.swing.JTextField ArtistTextField;
    private javax.swing.JMenuItem ClearMenuItems;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenu FileMenu;
    private static final javax.swing.JLabel GenreLable = new javax.swing.JLabel();
    private javax.swing.JTextField GenreTextField;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JTable MusicTable;
    private javax.swing.JMenu NestedDocsMenu;
    private javax.swing.JMenu OfflineDocsItem;
    private javax.swing.JMenuItem OnlineDocsItem;
    private javax.swing.JMenuItem OpenListItem;
    private javax.swing.JMenuItem SaveSelectedListItem;
    private javax.swing.JMenuItem SelectEditMenuItem;
    private static final javax.swing.JLabel SongNameLabel = new javax.swing.JLabel();
    private javax.swing.JTextField SongTextField;
    private javax.swing.JMenuItem TSVSaveMenuItem;
    private javax.swing.JScrollPane TableScrollPane;
    private static final javax.swing.JLabel YearLable = new javax.swing.JLabel();
    private javax.swing.JTextField YearTextField;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
